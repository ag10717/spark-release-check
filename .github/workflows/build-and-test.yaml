name: Build & Test
run-name: Build & Test
#
# Can run on pushes and manually triggered
on:
  push:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write # Required for the azure login action
  checks: write # Required for test-reporter action

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build
        run: |
          echo "Moving to SRC Directory"

          pushd src
          echo "Running GO Build"
          make build-aws
          echo "Moving back to Repo Root"
          popd

          echo "Completed BUILD"
      - name: Packaging
        run: |
          echo "Zipping Deployment"
          zip deployment.zip bootstrap
          echo "Completed PACKAGING"
      - name: Publish
        uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: ./deployment.zip
  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Release Version
        id: get-release-version
        env:
          GH_TOKEN: ${{ github.token }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Getting Latest Release Version"
          latest_release=$(gh release view --json tagName --jq ".tagName")
          echo "Latest Release: $latest_release"

          # use the PR title to check and see if something like MAJOR or MINOR is written in it
          # if it is then bump the version up in that column; ie: MAJOR; v1 -> v2.. MINOR; v1.1 -> v1.2
          # default with no message will be patch bump; ie: v1.1.1 -> v1.1.2

          new_version=""
          version_values=($(echo $latest_release | sed 's/v//' | tr '.' ' '))
          # trim off the feature version if it exists so we just have the patch version for later
          patch=($(echo ${version_values[2]} | sed 's/-[0-9]*//'))

          if [[ $REF_NAME == "main" ]]; then
            echo "Getting Latest Commit Message"
            latest_commit=$(git log -1 --pretty=%B)
            echo "Latest Commit Message: $latest_commit" 

            if [[ $latest_commit == *"MAJOR"* ]]; then
              # bump major version
              echo "Bumping Major Version"
              major=$((${version_values[0]} + 1))
              new_version="v$major.${version_values[1]}.$patch"
            elif [[ $latest_commit == *"MINOR"* ]]; then
              # bump minor version
              echo "Bumping Minor Version"
              minor=$((${version_values[1]} + 1))
              new_version="v${version_values[0]}.$minor.$patch"
            else
              echo "Using Patch Version"
              new_version="v${version_values[0]}.${version_values[1]}.$patch"
            fi
          else
            echo "Checking Feature Version"
            feature_version=$(echo "${latest_release: -4}")
            if [[ $feature_version == *"-"* ]]; then
              echo "Bumping Feature Version"
              # already has a feature version and it can be bumped
              trimmed=$(echo "${feature_version:1}")
              new_feature_version=$((trimmed + 1))
              # remove the existing feature version and append the new on
              no_feature_string=($(echo $latest_release | sed 's/-[0-9]*//'))
              new_version="$no_feature_string-$new_feature_version"
            else
              # if it doesn't contain the "-" then it doesn't have a feature version on the end
              # doesn't have a feature version yet
              echo "Adding Feature Version & Bumping Patch"
              patch=$((patch + 1))
              new_version="v${version_values[0]}.${version_values[1]}.$patch-001"
            fi
          fi

          echo "New Version Number: $new_version"
          echo "RELEASE_VERSION=$new_version" >> "$GITHUB_OUTPUT"

      - name: "Download Build"
        uses: actions/download-artifact@v4
        with:
          name: deployment
          path: ./deployment
      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Creating Release"
          gh release create $RELEASE_VERSION --target $REF_NAME './deployment/deployment.zip'

