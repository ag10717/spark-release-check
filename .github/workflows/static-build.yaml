name: Static Site Build
run-name: Static Site Build
#
# Can run on pushes and manually triggered
on:
  push:
    branches:
      - 'feature'
      - 'main'
    paths:
      - "src/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determining Release Version
        id: get-release-version
        env:
          GH_TOKEN: ${{ secrets.PA_TOKEN }}
          REF_NAME: ${{ github.ref_name }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "Getting Latest Release Version"
          latest_release=$(gh release view --json tagName --jq ".tagName")
          echo "Latest Release: $latest_release"

          # use the PR title to check and see if something like MAJOR or MINOR is written in it
          # if it is then bump the version up in that column; ie: MAJOR; v1 -> v2.. MINOR; v1.1 -> v1.2
          # default with no message will be patch bump; ie: v1.1.1 -> v1.1.2

          new_version=""
          version_values=($(echo $latest_release | sed 's/v//' | tr '.' ' '))
          # trim off the feature version if it exists so we just have the patch version for later
          patch=($(echo ${version_values[2]} | sed 's/-[0-9]*//'))

          if [[ $REF_NAME == "main" ]]; then
            echo "Getting Latest Commit Message"
            latest_commit=$(git log -1 --pretty=%B)
            echo "Latest Commit Message: $latest_commit" 

            if [[ $latest_commit == *"MAJOR"* ]]; then
              # bump major version
              echo "Bumping Major Version"
              major=$((${version_values[0]} + 1))
              new_version="v$major.${version_values[1]}.$patch"
            elif [[ $latest_commit == *"MINOR"* ]]; then
              # bump minor version
              echo "Bumping Minor Version"
              minor=$((${version_values[1]} + 1))
              new_version="v${version_values[0]}.$minor.$patch"
            else
              echo "Using Patch Version"
              new_version="v${version_values[0]}.${version_values[1]}.$patch"
              # we should check to see if the input even is a workflow dispatch on main
              # in that case we should just remove the current latest release/tag and let it be recreated
              if [[ $EVENT_NAME == "workflow_dispatch" ]]; then
                #remove the current release
                echo "Removing Latest Release"
                gh release delete $latest_release --cleanup-tag
                echo "$latest_release - Ready for Recreation"
              fi
            fi
          else
            echo "Checking Feature Version"
            feature_version=$(echo "${latest_release##*-}")
            if [[ $feature_version != *"v"* ]]; then
              echo "Bumping Feature Version"
              # already has a feature version and it can be bumped
              new_feature_version=$(($feature_version + 1))
              # remove the existing feature version and append the new on
              no_feature_string=($(echo $latest_release | sed 's/-[0-9]*//'))
              new_version="$no_feature_string-$new_feature_version"
            else
              # if it contains the "v" then it doesn't have a feature version on the end
              # doesn't have a feature version yet
              echo "Adding Feature Version & Bumping Patch"
              patch=$((patch + 1))
              new_version="v${version_values[0]}.${version_values[1]}.$patch-1"
            fi
          fi

          echo "New Version Number: $new_version"
          echo "RELEASE_VERSION=$new_version" >> "$GITHUB_OUTPUT"
      - name: Build
        env:
          RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
        run: |
          echo "Moving to SRC Directory"
          pushd src

          echo "Running Vite Build"

          echo "Injecting Version"
          echo "{ \"version\": $RELEASE_VERSION }" > src/assets/version.json
          echo "Finished Injecting Version"

          npm i
          npm run build
          echo "Moving back to Repo Root"

          popd
          echo "Completed BUILD"
      - name: Packaging
        run: |
          pushd src

          echo "Zipping Deployment"
          zip -r dist.zip dist/*
          echo "Completed PACKAGING"

          popd
      - name: Publish
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./src/dist.zip
  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Download Build"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./deployment
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.PA_TOKEN }}
          RELEASE_VERSION: ${{ needs.build-and-package.outputs.release_version }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Creating Release"
          gh release create $RELEASE_VERSION --target $REF_NAME --title $RELEASE_VERSION './deployment/dist.zip'

